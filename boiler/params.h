/*
 * params.h
 *
 * Created: 13.03.2018
 * Author: Antipin
 */ 

#ifndef PARAMS_H_
#define PARAMS_H_

//Пароль (начальное значение)
uint8_t Password_s[4] = {'0', '0', '0', '0'}; 

//DCON-команды на запуск сенсоров
__flash const char init_Sensors[3][7] = {{"^P0002"}, {"^P0003"}, {"^P0004"}};
//DCON-команды на считывание показаний сенсоров
__flash const char get_Result_Sensors[3][7] = {{"^T0002"}, {"^T0003"}, {"^T0004"}};
//Указатель на начало пакета приема/передачи
__flash const char* pointer_Flash = NULL;

//Буфер СОМ-порта 1
char buf_UART_1[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
//Буфер СОМ-порта 2
char buf_UART_2[16] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
uint16_t cnctn_cntr = 0;

//Температура датчиков 1-3 (числовая)
uint16_t cur_temp[3];// = {211, 222, 233};
//Счетчик для отслеживания обрыва датчика
uint8_t snc_err[3] = {0, 0, 0};

//Температура датчиков (символьная)
char snc1[5];// = {'2', '1', '.', '1', 0};
char snc2[5];// = {'2', '2', '.', '2', 0};
char snc3[5];// = {'2', '3', '.', '3', 0};

//Таймер для прокрутки показаний температуры на главном экране
uint16_t time_10_slide = 0;
//Флаг очередности позиций показаний температуры на главном экране
uint8_t flag_S = 3;

//Флаг отображения символьной информации на начальном экране
uint8_t flag_T = 0;
//Флаг отображения данных на главном экране
uint8_t flag_O = 0;
//Флаг переключения дня недели
uint8_t f_dow = 0;
//Таймер периода опроса датчиков (1 = 10 мс)
uint32_t time_10_dat = 0;
//Таймер периода ШИМ (1 = 10 мс)
uint32_t time_10_shim = 0;
//Таймер переключения насоса
uint32_t time_10_nas = 0;
//Время выключения насоса для переключения клапана
uint16_t time_per_nas = 20;

//Флаг переключения насоса
uint8_t flag_P = 0;
//Массив статуса закрытия клапанов (1-закрыт, 0-открыт)
uint8_t clsd_stms[4] = {1, 1, 1, 1};

//счетчик зажатия кнопки (3)
uint16_t t_push = 0;
//Флаг переключения ручное управление/автоматическое управление (0-автоматическое, 1-ручное(%t), 2-ручное(0/1))
uint8_t flag_R = 0;
//Процент времени открытия клапанов в ручном и аварийном режиме
uint8_t skv = 50;
//Массив для отображения на экране текущего статуса управления и процента времени открытия
char skv_s[6] = {'A', '0', '5', '0', 'D', 0};


char vis[6] = {'0', '0', '0', '0', '0', 0};
uint8_t vis_U[5] = {0, 0, 0, 0, 0};

//Предыдущее значение разницы темератур
int16_t E_prev[3] = {0, 0, 0};
//Предыдущее значение интегральной составляющей ПИД
int32_t I_prev[3] = {0, 0, 0};
	
//===================Общие================================//
//Текущее время
uint8_t hour, min, sec;
//Таймер для проверки достверности показаний часов реального времени
uint16_t time_10_clock = 0;
//Промежуточная переменная для хранения для значения управления
uint8_t temp_flag_R = 0;
uint8_t temp_skv_s_0 = 0;
//Счетчик ошибок часов реального времени
uint8_t clock_err = 0;
//Текущий день недели (0-6)
uint8_t cur_DOW_RAM;
//Переменная для хранения избыточных данных
unsigned char flush;
//Текущее время (симв)
uint8_t cur_time[5];
//Флаг режима "НОЧЬ"
uint8_t flag_N = 1;
//Список дней недели
uint8_t disp_DOW[8][3] = {{1, 'П', 'Н'},
						{2, 'В', 'Т'},
						{3, 'С', 'Р'},
						{4, 'Ч', 'Т'},
						{5, 'П', 'Т'},
						{6, 'С', 'Б'},
						{7, 'В', 'С'},
						{255, 0, 0}};


//Период ШИМ в сек
uint16_t EEMEM per_shim  = 1800;
uint16_t per_shim_RAM;
//Период ШИМ (симв)
uint8_t per_shim_s[5] = {'0', '0', '0', '0', 0};

//Период опроса датчиков в сек
uint16_t EEMEM per_dat  = 5;
uint16_t per_dat_RAM;
//Период опроса датчиков (симв)
uint8_t per_dat_s[5] = {'0', '0', '0', '0', 0};

//Статус дней недели (выходной/рабочий) EEPROM
uint8_t hol_DOW[7] EEMEM = {'0', '0', '0', '0', '0', '1', '1'};
//Статус дней недели (выходной/рабочий) RAM
uint8_t hol_DOW_RAM[7];

//Время начала рабочего дня
uint16_t time_nach [2] EEMEM = {5, 0};
//Время начала рабочего дня (RAM)
uint8_t time_nach_RAM [2];
//Время начала рабочего дня (симв)
uint8_t time_nach_s[5];

//Время конца рабочего дня
uint16_t time_kon [2] EEMEM = {16, 0};
//Время конца рабочего дня (RAM)
uint8_t time_kon_RAM [2];
//Время конца рабочего дня (симв)
uint8_t time_kon_s[5];

//====================Параметры контуров=======================//

//Температура режима "День"
uint16_t temp_den[3] EEMEM = {22, 20, 22};
uint16_t temp_den_RAM[3];
//Температура режима "День" (симв)
uint8_t temp_den_s[3][2];

//Температура режима "День"
uint16_t temp_noch[3] EEMEM = {17, 15, 17};
uint16_t temp_noch_RAM[3];
//Температура режима "Ночь" (симв)
uint8_t temp_noch_s[3][2];

//Пропорциональный коффициент ПИД-регулятора
uint32_t K_P[3] EEMEM = {55110, 55120, 55130};
//Пропорциональный коэффициент ПИД-регулятора (симв)
uint8_t K_P_s [3][7] = {{'0','0','0','0','0','0',0}, {'0','0','0','0','0','0',0}, {'0','0','0','0','0','0',0}};
uint32_t K_P_RAM[3];

//Интегральный коэффициент ПИД-регулятора
uint32_t K_I[3] EEMEM = {15, 3, 13};
//Интегральный коэффициент ПИД-регулятора (симв)
uint8_t K_I_s[3][5];// = {{'0', '.', '0', '1', '1'}, {'0', '.', '0', '1', '2'}, {'0', '.', '0', '1', '3'}};
uint32_t K_I_RAM[3];

//Дифференциальный коэффициент ПИД-регулятора
uint32_t K_D[3] EEMEM = {35110, 35120, 35130};
//Дифференциальный коэффициент ПИД-регулятора (симв)
uint8_t K_D_s [3][7] = {{'0','0','0','0','0','0',0}, {'0','0','0','0','0','0',0}, {'0','0','0','0','0','0',0}};
uint32_t K_D_RAM[3];

//Флаг входа в меню МС
uint8_t flag_M = 0;
//Период открытия клапана
uint8_t T_u[3] = {0, 0, 0};
#endif /* PARAMS_H_ */